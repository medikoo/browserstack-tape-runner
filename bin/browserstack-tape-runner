#!/usr/bin/env node

"use strict";

Error.stackTraceLimit = Infinity;

var flatten      = require("es5-ext/array/#/flatten")
  , assign       = require("es5-ext/object/assign")
  , deferred     = require("deferred")
  , glob         = deferred.promisify(require("glob"), 1)
  , resolve      = require("path").resolve
  , readFileSync = require("fs").readFileSync
  , argv         = require("minimist")(process.argv.slice(2))
  , meta         = require("../package")
  , runTests     = require("../");

var targetPath = process.cwd(), env = process.env, config = {}, targetMeta;

var usage = function () {
	return readFileSync(resolve(__dirname, "usage.txt"), "utf8").replace(
		"${ VERSION }", meta.version
	);
};

if (argv.h || argv.help) {
	process.stdout.write(usage());
	return;
}

if (!argv._.length) {
	process.stderr.write("Error: No <files> to test provided\n\n");
	process.stderr.write(usage());
	process.exit(1);
}

if (argv.v || argv.version) {
	process.stdout.write(meta.version + "\n");
	return;
}

try {
	targetMeta = require(resolve(targetPath, "package.json"));
} catch (ignore) {}

if (argv.c || argv.config) {
	assign(config, require(resolve(targetPath, argv.c || argv.config)));
} else if (targetMeta && targetMeta.browserstack) {
	assign(config, targetMeta.browserstack);
} else {
	process.stderr.write(
		"Error: Browserstack config missing\n" +
			"       It should be provided either via '--config' option or " +
			"be placed in package.json of a project\n\n"
	);
	process.stderr.write(usage());
	process.exit(1);
}

if (argv.n || argv.name) config.project = argv.n || argv.name;
else if (targetMeta) config.project = targetMeta.name;

if (argv.b || argv.build) {
	config.build = argv.b || argv.build;
} else if (env.CIRCLECI) {
	config.build = env.CIRCLE_TAG || env.CI_PULL_REQUESTS || env.CIRCLE_SHA1;
} else if (env.TRAVIS) {
	config.build = env.TRAVIS_TAG || env.TRAVIS_PULL_REQUEST || env.TRAVIS_COMMIT;
} else if (env.APPVEYOR) {
	config.build =
		env.APPVEYOR_REPO_TAG_NAME || env.APPVEYOR_PULL_REQUEST_NUMBER || env.APPVEYOR_REPO_COMMIT;
} else if (env.SEMAPHORE) {
	config.build = env.BRANCH_NAME || env.REVISION;
}

// Note: BROWSERSTACK_USERNAME and BROWSERSTACK_KEY
// If not passed with with config, must be set in your environment for test to run succesfully

deferred
	.map(argv._, glob)
	.invoke(flatten)(function (files) {
		return runTests(files, config);
	})
	.done(function (report) {
		var failed = [];

		// eslint-disable-next-line no-console
		console.log(report);

		if (!report.forEach) {
			process.stderr.write("Error: Unexpected report result");
			process.exit(1);
			return;
		}

		report.forEach(function (testReport) {
			if (testReport.suites.failed) failed.push(testReport.browser);
		});
		if (!failed.length) return;
		process.stderr.write("Error: Test failed for: " + failed.join(", ") + "\n");
		process.exit(1);
	});
